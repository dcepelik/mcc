#ifndef TOKINFO_H
#define TOKINFO_H

#include <stdbool.h>

#define IDENT_MAX_LEN	64
#define INIT_LINE_SIZE	1024

enum token
{
	TOKEN_HEADER_NAME,
	TOKEN_NAME,
	TOKEN_NUMBER,
	TOKEN_CHAR_CONST,
	TOKEN_STRING,

	TOKEN_LBRACKET,
	TOKEN_RBRACKET,
	TOKEN_LPAREN,
	TOKEN_RPAREN,
	TOKEN_LBRACE,
	TOKEN_RBRACE,
	TOKEN_DOT,
	TOKEN_ARROW,
	TOKEN_INC,
	TOKEN_DEC,
	TOKEN_AMPERSAND,
	TOKEN_ASTERISK,
	TOKEN_PLUS,
	TOKEN_MINUS,
	TOKEN_NEG,
	TOKEN_NOT,
	TOKEN_DIV,
	TOKEN_MOD,
	TOKEN_SHL,
	TOKEN_SHR,
	TOKEN_LT,
	TOKEN_GT,
	TOKEN_LE,
	TOKEN_GE,
	TOKEN_EQ_EQ,
	TOKEN_NEQ,
	TOKEN_XOR,
	TOKEN_OR,
	TOKEN_LOGICAL_AND,
	TOKEN_LOGICAL_OR,
	TOKEN_QUESTION_MARK,
	TOKEN_COLON,
	TOKEN_SEMICOLON,
	TOKEN_ELLIPSIS,
	TOKEN_EQ,
	TOKEN_MUL_EQ,
	TOKEN_DIV_EQ,
	TOKEN_MOD_EQ,
	TOKEN_PLUS_EQ,
	TOKEN_MINUS_EQ,
	TOKEN_SHL_EQ,
	TOKEN_SHR_EQ,
	TOKEN_AND_EQ,
	TOKEN_XOR_EQ,
	TOKEN_OR_EQ,
	TOKEN_COMMA,
	TOKEN_HASH,
	TOKEN_HASH_HASH,

	TOKEN_EOF,

	TOKEN_CPP_IF,
	TOKEN_CPP_IFDEF,
	TOKEN_CPP_IFNDEF,
	TOKEN_CPP_ELIF,
	TOKEN_CPP_ELSE,
	TOKEN_CPP_ENDIF,
	TOKEN_CPP_INCLUDE,
	TOKEN_CPP_DEFINE,
	TOKEN_CPP_UNDEF,
	TOKEN_CPP_LINE,
	TOKEN_CPP_ERROR,
	TOKEN_CPP_PRAGMA,

	TOKEN_ALIGNAS,
	TOKEN_ALIGNOF,
	TOKEN_ATOMIC,
	TOKEN_BOOL,
	TOKEN_COMPLEX,
	TOKEN_GENERIC,
	TOKEN_IMAGINARY,
	TOKEN_NORETURN,
	TOKEN_STATIC_ASSERT,
	TOKEN_THREAD_LOCAL,
	TOKEN_AUTO,
	TOKEN_BREAK,
	TOKEN_CASE,
	TOKEN_CHAR,
	TOKEN_CONST,
	TOKEN_CONTINUE,
	TOKEN_DEFAULT,
	TOKEN_DO,
	TOKEN_DOUBLE,
	TOKEN_ELSE,
	TOKEN_ENUM,
	TOKEN_EXTERN,
	TOKEN_FLOAT,
	TOKEN_FOR,
	TOKEN_GOTO,
	TOKEN_IF,
	TOKEN_INLINE,
	TOKEN_INT,
	TOKEN_LONG,
	TOKEN_REGISTER,
	TOKEN_RESTRICT,
	TOKEN_RETURN,
	TOKEN_SHORT,
	TOKEN_SIGNED,
	TOKEN_SIZEOF,
	TOKEN_STATIC,
	TOKEN_STRUCT,
	TOKEN_SWITCH,
	TOKEN_TYPEDEF,
	TOKEN_UNION,
	TOKEN_UNSIGNED,
	TOKEN_VOID,
	TOKEN_VOLATILE,
	TOKEN_WHILE,
};

struct tokinfo
{
	union
	{
		struct symbol *symbol;
		int value;
		int c;
		char *str;
	};

	enum token token;
	bool preceded_by_whitespace;
};

const char *token_name(enum token token);

#endif
