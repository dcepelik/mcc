#ifndef LEXER_H
#define LEXER_H

#define IDENT_MAX_LEN	64

#define	FLAG_PREFIX_L	1
#define FLAG_PREFIX_U	2
#define FLAG_PREFIX_u	4
#define FLAG_PREFIX_u8	8

#include "buffer.h"
#include <stdbool.h>

struct lexer {
	struct buffer *buffer;	/* the buffer being tokenized */
	int c;
	bool pushback;
	int pushback_char;
};

enum token {
	TOKEN_AUTO, TOKEN_BREAK, TOKEN_CASE, TOKEN_CHAR, TOKEN_CONST,
	TOKEN_CONTINUE, TOKEN_DEFAULT, TOKEN_DO, TOKEN_DOUBLE, TOKEN_ELSE,
	TOKEN_ENUM, TOKEN_EXTERN, TOKEN_FLOAT, TOKEN_FOR, TOKEN_GOTO,
	TOKEN_IF, TOKEN_INT, TOKEN_LONG, TOKEN_REGISTER, TOKEN_RETURN,
	TOKEN_SHORT, TOKEN_SIGNED, TOKEN_SIZEOF, TOKEN_STATIC,
	TOKEN_STRUCT, TOKEN_SWITCH, TOKEN_TYPEDEF, TOKEN_UNION,
	TOKEN_UNSIGNED, TOKEN_VOID, TOKEN_VOLATILE, TOKEN_WHILE,

	TOKEN_HEADER_NAME, TOKEN_IDENT, TOKEN_PP_NUMBER, TOKEN_CHAR_CONST,
	TOKEN_STRING_LITERAL,

	TOKEN_LBRACKET, TOKEN_RBRACKET, TOKEN_LPAREN, TOKEN_RPAREN,
	TOKEN_LBRACE, TOKEN_RBRACE, TOKEN_DOT, TOKEN_ARROW, TOKEN_INC,
	TOKEN_DEC, TOKEN_AMPERSAND, TOKEN_ASTERISK, TOKEN_PLUS, TOKEN_MINUS,
	TOKEN_TILDE, TOKEN_EXCL_MARK, TOKEN_SOLIDUS, TOKEN_PERCENT, TOKEN_SHL,
	TOKEN_SHR, TOKEN_CMP, TOKEN_CARET, TOKEN_LOGICAL_OR, TOKEN_VERTICAL_BAR,
	TOKEN_AND, TOKEN_OR, TOKEN_QUESTION_MARK, TOKEN_COLON, TOKEN_SEMICOLON,
	TOKEN_ELLIPSE, TOKEN_ASSIGN, TOKEN_COMMA, TOKEN_HASH, TOKEN_TWO_HASHES,
	TOKEN_EOF, TOKEN_ERROR
};

struct token_data {
	enum token token;

	union {
		char ident[IDENT_MAX_LEN];
		char string[IDENT_MAX_LEN];
		int value;
	};

	int prefix_flags;
};


void lexer_reset(struct lexer *lexer, struct buffer *buffer);
bool lexer_next_token(struct lexer *lexer, struct token_data *token_data);

#endif
